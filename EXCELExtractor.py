# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rGFgr2ljkqHX3YSyMVY9wzCie1sOaiWl
"""

import io
import re
import pandas as pd
import pyexcel_xls
import openpyxl
import datetime


class EXCELExtractor:
    @staticmethod
    def run(ruta):

        #LEER EL XLS, PASARLO A XLS y GUARDARLO COMO IO
        ubicacion = ruta
        original = pyexcel_xls.get_data(ubicacion)
        nuevo = openpyxl.Workbook()
        ws1 = nuevo.active
        df = pd.DataFrame(columns =range(1,29))
        for fila in original['rptListadoConsumoClientes']:
            ws1.append(fila)

        buf = io.BytesIO()
        nuevo.save(buf)
        buf.seek(0)

        raw = pd.read_excel(buf, header=None)
        #COMENZAR LAS NORMALIZACIONES

        
        #EST_00SOL
        header_idx00 = raw[raw[1].eq('Cliente')].index.values[0]
        footer_idx00 = raw[raw[1].eq('01\nAIRES')].index.values[0]-2

        numero_cols_SOL0 = footer_idx00-header_idx00
        Est_00SOL = pd.read_excel(buf, header=header_idx00, nrows=numero_cols_SOL0)
        Est_00SOL['Estacion'] = raw.iloc[header_idx00-1][1]
        Est_00SOL.rename(columns={'Cliente': 'Factura', 'Factura': 'Tiquete'})
        for columna in ['Cliente']:
            Est_00SOL[columna] = Est_00SOL[columna].fillna(method = 'ffill')
            Est_00SOL[columna] = Est_00SOL[columna].apply(lambda x: x.split('\n')[0])
        for columna in ['Estacion']:
            Est_00SOL[columna] = Est_00SOL[columna].fillna(method='ffill')
            Est_00SOL[columna] = Est_00SOL[columna].apply(lambda x: ' '.join([ x.split('\n')[0],  x.split('\n')[1]]))
        Est_00SOL.rename(columns={'Cliente':'Factura', 'Factura':'Tiquete'}, inplace=True)
        Est_00SOL = Est_00SOL.dropna(axis=1)
        Est_00SOL['Hora'] = Est_00SOL['Hora'].apply(lambda x: x.strftime('%H:%M'))

        #EST_01AIRES
        header_idx01 = header_idx00 + raw[raw[1].eq('Cliente')].index.values[0]-1
        footer_idx01 = raw[raw[1].eq('02\nURT')].index.values[0]-2

        numero_cols_SOL1 = footer_idx01-header_idx01
        Est_01AIRES = pd.read_excel(buf, header=header_idx01, nrows=numero_cols_SOL1)
        Est_01AIRES['Estacion'] = raw.iloc[header_idx01-1][1]
        for columna in ['Cliente']:
            Est_01AIRES[columna] = Est_01AIRES[columna].fillna(method = 'ffill')
            Est_01AIRES[columna] = Est_01AIRES[columna].apply(lambda x: x.split('\n')[0])
        for columna in ['Estacion']:
            Est_01AIRES[columna] = Est_01AIRES[columna].fillna(method='ffill')
            Est_01AIRES[columna] = Est_01AIRES[columna].apply(lambda x: ' '.join([ x.split('\n')[0],  x.split('\n')[1]]))
        Est_01AIRES.rename(columns={'Cliente':'Factura', 'Factura':'Tiquete'}, inplace=True)
        Est_01AIRES = Est_01AIRES.dropna(axis=1)

        #EST_02RUT
        header_idx02 = header_idx01 + raw[raw[1].eq('Cliente')].index.values[0]-2
        footer_idx02 = len(raw)-3

        numero_cols_SOL2 = footer_idx02-header_idx02
        Est_02RUT = pd.read_excel(buf, header=header_idx02, nrows=numero_cols_SOL2)
        Est_02RUT['Estacion'] = raw.iloc[header_idx02-1][1]
        for columna in ['Cliente']:
            Est_02RUT[columna] = Est_02RUT[columna].fillna(method = 'ffill')
            Est_02RUT[columna] = Est_02RUT[columna].apply(lambda x: x.split('\n')[0])
        for columna in ['Estacion']:
            Est_02RUT[columna] = Est_02RUT[columna].fillna(method='ffill')
            Est_02RUT[columna] = Est_02RUT[columna].apply(lambda x: ' '.join([ x.split('\n')[0],  x.split('\n')[1]]))
        Est_02RUT.rename(columns={'Cliente':'Factura', 'Factura':'Tiquete'}, inplace=True)
        Est_02RUT = Est_02RUT.dropna(axis=1)

        df = pd.concat([Est_00SOL, Est_01AIRES, Est_02RUT])
        df['Fecha'] = df['Fecha'].dt.strftime('%d/%m/%Y')
        df['Cant.'] = df['Cant.'].astype(int)
        df[['Precio', 'Total Venta']] = df[['Precio', 'Total Venta']].astype(float)
        df.to_csv('ExcelExtractor.csv', index=False)
        return df