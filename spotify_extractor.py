# -*- coding: utf-8 -*-
"""Spotify_EXTRACTOR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18yhmjjNHYZjhYUSjzQdDfUMPjCbp8g2J
"""

import spotipy
import spotipy.util as util
import pandas as pd


keys = {'id': 'SPOTIFY ID', 
        'secret':'SPOTIFY SECRET', 
        'username': 'USUARIO SPOTIFY',
        'url': 'URL DE CONEXION'}

class TopExtractor:
  @staticmethod
  def run(keys, year, country):
    try: #BUSCAR TOKEN
      token = util.prompt_for_user_token(keys['username'], scope="user-top-read", client_id = keys['id'], client_secret = keys['secret'], redirect_uri=keys['url'])
    except Exception as TokenError:
      print('No se pudo encontrar el token: ', TokenError)
    else:
      try: #PREPARAR LA API
        sp = spotipy.Spotify(auth=token)
      except Exception as APIError:
        print('Falló la conexión: ', APIError)
      else:
        try: #LLAMAR LA API
          data = sp.search(q="year:{}".format(year), type="track", market = country, limit=50)
        except Exception as SearchError:
          print('No se pudo encontrar canciones según los parámetros: ', SearchError)
        else: #NORMALIZAR LOS DATOS
          canciones = data["tracks"]["items"]
          canciones.sort(key=lambda x: x['popularity'], reverse=True)
          df = pd.json_normalize(canciones) #NORMALIZAR EL JSON
          df_final = df.join(df['artists'].apply(lambda x: pd.Series({'nombre_artista': x[0]['name'], 'artista_id': x[0]['id']})))
          df_final = df_final[['name','nombre_artista', 'artista_id', 'popularity']]
          #TRAER LOS GENEROS
          df_final['genero'] = df_final['artista_id'].apply(lambda x: sp.artist(artist_id=x)['genres'])
          df_final['genero'] = df_final['genero'].apply(lambda x: 'Sin genero' if not x else x[0]) #NOTA: SE TOMA SOLO EL PRIMER GÉNERO DE LA LISTA AL SER EL MÄS RELEVANTE
          df_final= df_final[['name', 'nombre_artista', 'genero', 'popularity']]
          #EXPORTAR CSVS
          generos = df_final.groupby('genero', as_index=False)
          generos.apply(lambda x: x.to_csv("{}.csv".format(x.name), index = False, encoding='utf-8-sig'))
          return df_final